#pragma kernel Normal
#pragma kernel Mul
#pragma kernel Screen
#pragma kernel Overlay
#pragma kernel HardLight
#pragma kernel SoftLight
#pragma kernel ColorDodge
#pragma kernel ColorBurn
#pragma kernel LinearBurn
#pragma kernel VividLight
#pragma kernel LinearLight
#pragma kernel Divide
#pragma kernel Addition
#pragma kernel Subtract
#pragma kernel Difference
#pragma kernel DarkenOnly
#pragma kernel LightenOnly
#pragma kernel Hue
#pragma kernel Saturation
#pragma kernel Color
#pragma kernel Luminosity
#pragma kernel ClassicNormal

#include "./BlendTextureHelper.hlsl"



uint Size;
RWStructuredBuffer<float4> BaseTex;
StructuredBuffer<float4> AddTex;

[numthreads(32, 32, 1)] void Normal(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendNormal(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void Mul(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendMul(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void Screen(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendScreen(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void Overlay(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendOverlay(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void HardLight(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendHardLight(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void SoftLight(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendSoftLight(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void ColorDodge(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendColorDodge(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void ColorBurn(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendColorBurn(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void LinearBurn(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendLinearBurn(BaseColor, AddColor);
}

[numthreads(32, 32, 1)] void VividLight(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendVividLight(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void LinearLight(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendLinearLight(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void Divide(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendDivide(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void Addition(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendAddition(BaseColor, AddColor);
}[numthreads(32, 32, 1)] void Subtract(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendSubtract(BaseColor, AddColor);
}[numthreads(32, 32, 1)] void Difference(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendDifference(BaseColor, AddColor);
}[numthreads(32, 32, 1)] void DarkenOnly(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendDarkenOnly(BaseColor, AddColor);
}[numthreads(32, 32, 1)] void LightenOnly(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendLightenOnly(BaseColor, AddColor);
}[numthreads(32, 32, 1)] void Hue(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendHue(BaseColor, AddColor);
}[numthreads(32, 32, 1)] void Saturation(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendSaturation(BaseColor, AddColor);
}[numthreads(32, 32, 1)] void Color(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendColor(BaseColor, AddColor);
}[numthreads(32, 32, 1)] void Luminosity(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = ColorBlendLuminosity(BaseColor, AddColor);
}
[numthreads(32, 32, 1)] void ClassicNormal(uint3 id : SV_DispatchThreadID) {
  uint OneDIndex = TwoDToOneDIndex((uint2)id, Size);
  float4 BaseColor = BaseTex[OneDIndex];
  float4 AddColor = AddTex[OneDIndex];

  BaseTex[OneDIndex] = saturate(ColorBlendClassicNormal(BaseColor, AddColor));
}