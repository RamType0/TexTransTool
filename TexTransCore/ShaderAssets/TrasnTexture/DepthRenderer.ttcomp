/*
BEGIN__TT_COMPUTE_SHADER_HEADER

Language HLSL
LanguageVersion 2018

TTComputeType General

END__TT_COMPUTE_SHADER_HEADER
*/
cbuffer gv
{
    uint2 DepthMapSize;

    float AlimentPadding1;
    float AlimentPadding2;
}

StructuredBuffer<float4> Polygons;
RWStructuredBuffer<uint> DepthBuffer;

#include "./TransMappingHelper.hlsl"

float4 MinMax(float2 tri[3])
{
    float2 minVal = min(min(tri[0], tri[1]), tri[2]);
    float2 maxVal = max(max(tri[0], tri[1]), tri[2]);
    return float4(minVal , maxVal);
}

#define PARALLEL_COUNT 256
// #define PARALLEL_COUNT 1
[numthreads(1, PARALLEL_COUNT, 1)] void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint thisID = id.y;
    uint idMax = PARALLEL_COUNT;
    uint polygonIndex = id.x * 3;

    float2 polygon[3];
    float2 depthPolygon[3];

    polygon[0].xy = Polygons[polygonIndex + 0].xy * float2(DepthMapSize);
    polygon[1].xy = Polygons[polygonIndex + 1].xy * float2(DepthMapSize);
    polygon[2].xy = Polygons[polygonIndex + 2].xy * float2(DepthMapSize);

    depthPolygon[0].xy = Polygons[polygonIndex + 0].zw;
    depthPolygon[1].xy = Polygons[polygonIndex + 1].zw;
    depthPolygon[2].xy = Polygons[polygonIndex + 2].zw;

    float4 rect = MinMax(polygon);
    int2 minVal = int2(floor(rect.xy));
    int2 maxVal = int2(ceil(rect.zw));

    int ySize = maxVal.y - minVal.y;
    for (int yID = thisID; ySize > yID; yID += idMax)
    {
        int y = minVal.y + yID;
        for (int x = minVal.x; maxVal.x > x; x += 1)
        {
            float2 pos = float2(x + 0.5, y + 0.5);
            int2 posIndex = int2(x, y);

            float3 toBC = Barycentric(polygon, pos);
            if (InsideBarycentric(toBC) < 0.5) { continue; }

            float depth = CalculatePositionFromBarycentric(depthPolygon, toBC).x;
            if (depth < 0 || depth > 1) { continue; }

            double uintMaxD = double(4294967295u);
            uint intDepth = 4294967295u - uint(double(depth) * uintMaxD);

            uint index = (DepthMapSize.x * posIndex.y) + posIndex.x;
            InterlockedMax(DepthBuffer[index], intDepth);
        }
    }

}
